
flafs_c			=-Wall -Werror -Wextra -std=c11
# flags_check=-lcheck
flags_check		=$(shell pkg-config --libs check)
flags_gcov		=--coverage
flags_sanitize	=#-fsanitize=address -static-libasan -g
flags_valgrid	=	CK_FORK=no valgrind --trace-children=yes \
					--track-fds=yes --leak-check=full \
					--track-origins=yes --log-file=valgrind-out.txt --show-leak-kinds=all


dir_tests		= backend/tests/
dir_calc_src	= gui
dir_build		= ../build
static_lib 		= s21_SmartCalc.a
dir_qt 			= gui
qt_project_name = SmartCalc
DIRECTORY 		= gui/
ifeq ($(shell uname), Linux)
	flafs_c		+= -U__STRICT_ANSI__
	flags_check +=-lpthread -lrt -lsubunit -lm
endif

all: install run

install:
	cd gui/ && cmake $(CURDIR)/gui && make

run:
	./gui/SmartCalc

uninstall:
	rm -rf ../$(dir_build)


dist:
	make install
	[ -d ../$(qt_project_name) ] || mkdir -p ../$(qt_project_name)
	cp -r ./* ../$(qt_project_name)/
	tar cvzf ../SmartCalc_v1.0.tgz ../$(qt_project_name)/
	rm -rf ../$(qt_project_name)/
# 	make uninstall

dvi:
ifeq ($(shell uname), Linux)
	open dvi.html
else
	open dvi.html
endif


test: clean
	checkmk clean_mode=1 ${dir_tests}/*.check > test.c
	gcc ${flags_sanitize} ${flafs_c} ${wildcard ${dir_calc_src}/*.c} test.c -o test ${flags_check}
	rm -rf test.c
	./test


gcov_report: clean
	checkmk clean_mode=1 ${dir_tests}/*.check > test.c
	gcc ${flafs_c} ${wildcard ${dir_calc_src}/*.c} test.c -o test ${flags_check} ${flags_gcov}
	./test
	lcov --capture --directory . --output-file report.info
	genhtml report.info --output-directory report
	make clean
ifeq ($(shell uname), Linux)
	firefox report/index.html
else
	open report/index.html
endif


${static_lib}:
	rm -rf ${static_lib}
	gcc ${flags_sanitize} ${flafs_c} -c ${wildcard ${dir_calc_src}/*.c}
	ar rc ${static_lib} *.o
	ranlib ${static_lib}
	rm *.o





clean:
	rm -rf a.out unit_test gcov_test *.gcda *.gcno *.info ${static_lib} *.o  test.c valgrind-out.txt
clean_all: clean
	rm -rf report test main $(dir_qt)/build-smart_calc ../SmartCalc_v1.0.tgz $(dir_qt)/build-sm_clc-Desktop-Debug




valgrind: clean
	checkmk clean_mode=1 ${dir_tests}/*.check > test.c
	gcc ${flafs_c} ${wildcard ${dir_calc_src}/*.c} test.c -o test ${flags_check}
	rm -rf test.c
	${flags_valgrid} ./test

check_clang_format:
	cp ../materials/linters/.clang-format .
	clang-format -n ./${dir_calc_src}/*.c ./$(dir_qt)/${qt_project_name}/*.cpp
	rm -f .clang-format

fix_clang_format:
	cp ../materials/linters/.clang-format .
	clang-format -i ./${dir_calc_src}/*.c ./$(dir_qt)/${qt_project_name}/*.cpp
	rm -f .clang-format

